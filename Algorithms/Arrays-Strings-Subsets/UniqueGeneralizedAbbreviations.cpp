/** Problem Statement
  * Given a word, write a function to generate all of its unique generalized abbreviations.
  *
  * Generalized abbreviation of a word can be generated by replacing each substring of the word by the
  * count of characters in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and
  * “ab”. After replacing these substrings in the actual word by the count of characters we get all the
  * generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
  *
  * Example 1:
  * Input: "BAT"
  * Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"
  *
  * Example 2:
  * Input: "code"
  * Output: "code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode", "1od1", "1o1e", "1o2",
  * "2de", "2d1", "3e", "4"
  */

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

struct AbbreviatedString {
  string str;
  int len, abbCount;
};

vector<string> generateAbbreviations(string word) {
  vector<string> res;
  int n = word.size();
  if (n == 0)
    return res;

  queue<AbbreviatedString> q;
  q.push({ "", 0, 0 });
  while(!q.empty()) {
    int levelSize = q.size();

    for (int i = 0; i < levelSize; i++) {
      AbbreviatedString curr = q.front(); q.pop();

      if (curr.len == n) {
        if (curr.abbCount != 0)
          curr.str.append(to_string(curr.abbCount));

        res.push_back(curr.str);
      } else {
        q.push({ curr.str, curr.len + 1, curr.abbCount + 1 });

        if (curr.abbCount != 0)
          curr.str.append(to_string(curr.abbCount));

        curr.str += word[curr.len];
        q.push({ curr.str, curr.len + 1, 0 });
      }
    }
  }

  return res;
}

void solve(string word, string curr, int currLen, int abbCount, vector<string>& res) {
  if (currLen == word.size()) {
    if (abbCount != 0)
      curr.append(to_string(abbCount));

    res.push_back(curr);
  } else {
    solve(word, curr, currLen + 1, abbCount + 1, res);

    if (abbCount != 0)
      curr.append(to_string(abbCount));

    curr += word[currLen];
    solve(word, curr, currLen + 1, 0, res);
  }
}

vector<string> generateAbbreviationsRecursive(string word) {
  if (word.size() == 0)
    return {""};

  vector<string> res;
  solve(word, "", 0, 0, res);
  return res;
}

void printResult(vector<string>& arr) {
  for (string s : arr) {
    cout << s << " ";
  }
  cout << "\n";
}

int main() {
  string word = "BAT";
  vector<string> res = generateAbbreviations(word);
  printResult(res);

  word = "code";
  res = generateAbbreviationsRecursive(word);
  printResult(res);
  return 0;
}
